// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  job           Job[]
  isCompany     Boolean   @default(false)

  Application Application[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  title        String?
  description  String?
  salary       String?
  location     String?
  published    Boolean       @default(true)
  authorId     String
  author       User          @relation(fields: [authorId], references: [id])
  applications Application[]

  categoryId Int  @default(1)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: NoAction)
}

model Application {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  coverletter String

  jobId    Int
  job      Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  jobs Job[]
}
